## Swarm01
docker swarm init --advertise-addr 192.168.10.1

## Swarm 02/03
docker swarm join --token SWMTKN-1-4b0yzdn30rx7qopbor2j0frbdx110a9kxfurtpqtp4modi80so-25gg795z2y85tj47j7hv56w90 192.168.10.1:2377

## Overlay Network
docker network create --subnet 1.0.0.0/8 --driver overlay saas

## Consul Server
# On each node :
mkdir /var/consul

# On manager node
# docker service create --name consul --mode global --mount type=bind,source=/var/consul,target=/consul/data --network saas --env CONSUL_BIND_INTERFACE=eth0 --env CONSUL_CLIENT_INTERFACE=eth0 consul agent -server -bootstrap-expect=3  -retry-join=tasks.consul

# Test
# from within a container, docker ps thent docker exec -it <ID> /bin/sh
curl http://consul:8500/v1/agent/members?pretty

## Registrator
docker service create --name=registrator --network saas --mode global --mount type=bind,source=/var/run/docker.sock,target=/tmp/docker.sock gliderlabs/registrator:latest -internal consul://consul:8500

# Test
# from within a container
curl http://consul:8500/v1/catalog/services?pretty
{
    "consul": [],
    "consul-8300": [],
    "consul-8301": [
        "udp"
    ],
    "consul-8302": [
        "udp"
    ],
    "consul-8500": [],
    "consul-8600": [
        "udp"
    ]
}

# Create a new service
docker service create --name redis redis

# from within a container
curl http://consul:8500/v1/catalog/services?pretty
{
    "consul": [],
    "consul-8300": [],
    "consul-8301": [
        "udp"
    ],
    "consul-8302": [
        "udp"
    ],
    "consul-8500": [],
    "consul-8600": [
        "udp"
    ],
    "redis": []
}


curl http://consul:8500/v1/catalog/service/redis?pretty
[
    {
        "ID": "b0e8b952-4701-9bff-c0ec-e8251b2af785",
        "Node": "aa18b1acf6f8",
        "Address": "1.0.0.8",
        "Datacenter": "dc1",
        "TaggedAddresses": {
            "lan": "1.0.0.8",
            "wan": "1.0.0.8"
        },
        "NodeMeta": {
            "consul-network-segment": ""
        },
        "ServiceKind": "",
        "ServiceID": "a8b0f19a2dc5:redis.1.zvr6nz3s3446pvtuy9cui09a7:6379",
        "ServiceName": "redis",
        "ServiceTags": [],
        "ServiceAddress": "172.17.0.2",
        "ServiceWeights": {
            "Passing": 1,
            "Warning": 1
        },
        "ServiceMeta": {},
        "ServicePort": 6379,
        "ServiceEnableTagOverride": false,
        "ServiceProxyDestination": "",
        "ServiceProxy": {},
        "ServiceConnect": {},
        "CreateIndex": 468,
        "ModifyIndex": 468
    }
]

docker service rm redis

## Service

docker service create  --name hello  --network saas --replicas 3 nginxdemos/hello:plain-text


## Nginx

# Create a simple conf
# on manager

mkdir nginx
vi nginx/simple.conf

  server {
    listen 80;

  }

# Run nginx with that config and publish port (port 8500 is from vagrant, not related to consul :-) )
docker service create --name nginx -p 8500:80 --network saas --constraint=node.role==manager --mount type=bind,source=/root/nginx,target=/etc/nginx/conf.d nginx

# Here, nginx displays not found as there is no html file to publis.
# Now let's create a consul template for loadbalancing

  vi nginx/simple.ctmpl

  upstream helloservers {
    {{range service "hello" "any"}}
      server {{.Address}}:{{.Port}} ;
    {{end}}
  }


  server {
    listen 80;

    location / {
      proxy_pass  http://helloservers;
      proxy_next_upstream error timeout invalid_header http_500;
    }

  }



# We need to tweak consult-template:alpin
# We need to install docker into that container and to run consul-template as root (to use docker socket)


cat Dockerfile

  FROM hashicorp/consul-template:alpine
  RUN apk update
  RUN apk add docker
  RUN sed -i "s/gosu consul-template/gosu root/g" /usr/local/bin/docker-entrypoint.sh

docker build -t g4bzh/ctmpl  -f Dockerfile_ConsulTemplate .
docker login
docker push  g4bzh/ctmpl



# Run consul template : we are mounting docker and its socket in order to launch "docker service update" from within consul template
# We are mapping nginf conf.d to tmp dir of consul template in order to generate the conf
# We give the templating rule : transform ctmpl file into nginx conf file then update docker service
# We also bind to consul service to check  service changes

docker service create  --name consul-tpl --network saas --constraint=node.role==manager -e CONSUL_TEMPLATE_LOG=debug  \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock  \
--mount type=bind,source=/root/nginx,target=/tmp/nginx  \
g4bzh/ctmpl \
-template "/tmp/nginx/simple.ctmpl:/tmp/nginx/simple.conf:docker service update --force nginx" \
-consul-addr consul:8500


# Now test
cat nginx/simple.conf
docker service scale hello=10
cat nginx/simple.conf
docker service scale hello=1

Think it s easier to group nginx and consul-template :


docker build -t g4bzh/ngx  -f Dockerfile_NginxConsulTemplate .
docker login
docker push  g4bzh/ngx


## Mongo

Launch bitnmai images to create a replicaset (1 primary, 1 secondary and 1 arbitrer)
Exec from with primary container:

mongoimport -d saas -c data <<EOF
<mongodb/schema.json content here>
EOF

This will provide us 2 clients (foo@bar.com and john@doe.com) with the same spoofed domain example.com:
 - www and mail resolve into 1.2.3.4 for foo@bar.com
 - www and mail resolve into 6.7.8.9 for john@doe.com


## Bind

docker build -t g4bzh/bnd  -f Dockerfile_Bind .
docker login
docker push  g4bzh/bnd

docker service create --name "dns-foo-bar-com" --network SAAS_saas -e CLIENTID="foo@bar.com" -e SERVICE_TAGS="~^10.*" -e SERVICE_NAME="dns-foo-bar-com"  g4bzh/bnd
docker exec -it `docker ps | grep dns | cut -d ' ' -f 1` /bin/bash

  root@7bf86586549e:/# env
  HOSTNAME=7bf86586549e
  PWD=/
  HOME=/root
  MONGOURL=mongodb01:27017,mongodb02:27017
  TERM=xterm
  SHLVL=1
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  CLIENTID=foo@bar.com
  SERVICE_NAME=dns-john-doe-com
  SERVICE_TAGS=~^1\..*
  _=/usr/bin/env

toZone will connect to MONGOURL and fetch DNS data for CLIENTID. Then bind will execute

Launch another one :

docker service create --name "dns-john-doe-com" --network SAAS_saas -e CLIENTID="john@doe.com" -e MONGOURL="mongodb01:27017,mongodb02:27017" -e SERVICE_TAGS="~^1\..*,5.5.5.5" -e SERVICE_NAME="dns-john-doe-com" g4bzh/bnd

We have 2 bind containers with same spoofed domain example.com. Consul-template should have generate a config for nginx in order to route to DNS server according to ip source (stored in SERVICE_TAGS)
Test it:

nslookup www.example.com:
 - from host (10.0.0.0 network) : 1.2.3.4
 - from within a container (1.0.0.0 network - may need to install dnsutils into container) : 6.7.8.9

Note that nslookup www.example.com from ip 5.5.5.5 will resolve too 6.7.8.9 too.

## Stack

Assuming compose file is in /docker :

  docker stack deploy -c /docker/SAAS.yml SAAS
