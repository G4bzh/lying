## Swarm01
docker swarm init --advertise-addr 192.168.10.1

## Swarm 02/03
docker swarm join --token SWMTKN-1-4b0yzdn30rx7qopbor2j0frbdx110a9kxfurtpqtp4modi80so-25gg795z2y85tj47j7hv56w90 192.168.10.1:2377

## Overlay Network
docker network create --subnet 1.0.0.0/8 --driver overlay saas

## Consul Server
# On each node :
mkdir /var/consul

# On manager node
# docker service create --name consul --mode global --mount type=bind,source=/var/consul,target=/consul/data --network saas --env CONSUL_BIND_INTERFACE=eth0 --env CONSUL_CLIENT_INTERFACE=eth0 consul agent -server -bootstrap-expect=3  -retry-join=tasks.consul

# Test
# from within a container, docker ps thent docker exec -it <ID> /bin/sh
curl http://consul:8500/v1/agent/members?pretty

## Registrator
docker service create --name=registrator --network saas --mode global --mount type=bind,source=/var/run/docker.sock,target=/tmp/docker.sock gliderlabs/registrator:latest -internal consul://consul:8500

# Test
# from within a container
curl curl http://consul:8500/v1/catalog/services?pretty
{
    "consul": [],
    "consul-8300": [],
    "consul-8301": [
        "udp"
    ],
    "consul-8302": [
        "udp"
    ],
    "consul-8500": [],
    "consul-8600": [
        "udp"
    ]
}

# Create a new service
docker service create --name redis redis

# from within a container
curl http://consul:8500/v1/catalog/services?pretty
{
    "consul": [],
    "consul-8300": [],
    "consul-8301": [
        "udp"
    ],
    "consul-8302": [
        "udp"
    ],
    "consul-8500": [],
    "consul-8600": [
        "udp"
    ],
    "redis": []
}


curl http://consul:8500/v1/catalog/service/redis?pretty
[
    {
        "ID": "b0e8b952-4701-9bff-c0ec-e8251b2af785",
        "Node": "aa18b1acf6f8",
        "Address": "1.0.0.8",
        "Datacenter": "dc1",
        "TaggedAddresses": {
            "lan": "1.0.0.8",
            "wan": "1.0.0.8"
        },
        "NodeMeta": {
            "consul-network-segment": ""
        },
        "ServiceKind": "",
        "ServiceID": "a8b0f19a2dc5:redis.1.zvr6nz3s3446pvtuy9cui09a7:6379",
        "ServiceName": "redis",
        "ServiceTags": [],
        "ServiceAddress": "172.17.0.2",
        "ServiceWeights": {
            "Passing": 1,
            "Warning": 1
        },
        "ServiceMeta": {},
        "ServicePort": 6379,
        "ServiceEnableTagOverride": false,
        "ServiceProxyDestination": "",
        "ServiceProxy": {},
        "ServiceConnect": {},
        "CreateIndex": 468,
        "ModifyIndex": 468
    }
]

docker service rm redis

## Service

docker service create  --name hello  --network saas --replicas 3 nginxdemos/hello:plain-text


## Nginx

# Create template



# Run nginx

# On manager
mkdir nginx
vi nginx/simple.conf

  server {
    listen 80;

  }

docker service create --name nginx -p 8500:80 --network saas --constraint=node.role==manager --mount type=bind,source=$PWD/nginx,target=/etc/nginx/conf.d nginx


vi nginx/simple.ctmpl

upstream helloservers {
  {{range service "hello" "any"}}
    server {{.Address}}:{{.Port}} ;
  {{end}}
}


server {
  listen 80;

  location / {
    proxy_pass  http://testhelloservers;
    proxy_next_upstream error timeout invalid_header http_500;
  }

}


docker service create  --name consul-tpl --network saas --constraint=node.role==manager -e CONSUL_TEMPLATE_LOG=debug  \
--mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock  \
--mount type=bind,source=/usr/bin/docker,target=/usr/bin/docker  \
--mount type=bind,source=$PWD/nginx,target=/tmp/nginx  \
hashicorp/consul-template \
-template "/tmp/nginx/simple.ctmpl:/tmp/nginx/simple.conf:/usr/bin/docker service update --force nginx" \
-consul-addr consul:8500
